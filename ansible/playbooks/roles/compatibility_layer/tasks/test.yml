# Run a ReFrame test suite to validate the correctness
# of the compatibility layer installation.
---

- name: Check if ReFrame is installed
  ansible.builtin.command: reframe --version >/dev/null 2>&1
  register: reframe_exists
  ignore_errors: true
  changed_when: false
  tags:
    - test

- name: Check for python3
  ansible.builtin.command:
    cmd: "which python3"
  register: which_python3
  changed_when: which_python3.rc != 0

- name: Result for python3 check
  ansible.builtin.debug:
    msg: "{{ which_python3.stdout }}"
  changed_when: false

- name: "Check if venv exists {{ reframe_venv_dir }}"
  ansible.builtin.command:
    cmd: "ls -l {{ reframe_venv_dir }}"
  register: ls_reframe_venv_dir
  ignore_errors: true
  changed_when: false
  tags:
    - test

- name: "Result for checking {{ reframe_venv_dir }}"
  ansible.builtin.debug: msg="{{ ls_reframe_venv_dir }}"
  changed_when: false

# - name: "Show contents of {{ reframe_venv_dir }}/bin"
#  ansible.builtin.command:
#    cmd: "ls -l {{ reframe_venv_dir }}/bin"
#  register: ls_reframe_venv_dir_bin
#  ignore_errors: true
#  changed_when: false
#  tags:
#    - test
#
# - debug: msg="{{ ls_reframe_venv_dir_bin }}"

- name: Remove venv
  ansible.builtin.command:
    cmd: "rm -rf {{ reframe_venv_dir }}"
  when: reframe_exists.rc != 0
  register: remove_venv
  ignore_errors: true
  changed_when: false
  tags:
    - test

- name: Result for removing venv
  ansible.builtin.debug: msg="{{ remove_venv.stdout }}"
  changed_when: false

# - name: "Show contents of {{ reframe_venv_dir }}"
#  ansible.builtin.command:
#    cmd: "ls -l {{ reframe_venv_dir }}"
#  register: ls_reframe_venv_dir
#  ignore_errors: true
#  changed_when: false
#  tags:
#    - test
#
# - debug: msg="{{ ls_reframe_venv_dir }}"

# - name: Install ReFrame with venv pip
#  ansible.builtin.shell: |
#    which python3
#    #python3 -m venv "{{ reframe_venv_dir }}"
#    #. "{{ reframe_venv_dir }}/bin/activate"
#    #which python3
#    #    python3 -m pip install ReFrame-HPC
#  when: reframe_exists.rc != 0
#  register: pip_reframe
#
# - debug: msg="{{ pip_reframe.stdout }}"

- name: Install Reframe using pip if it's not installed yet
  ansible.builtin.pip:
    name: ReFrame-HPC
    virtualenv: "{{ reframe_venv_dir }}"
    #    virtualenv_command: "{{ gentoo_prefix_path }}/usr/bin/python3 -m venv"
    virtualenv_command: python3 -m venv
    state: forcereinstall
  when: reframe_exists.rc != 0

- name: Copy ReFrame test file
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/../../test/compat_layer.py"
    dest: "{{ reframe_venv_dir }}/compat_layer.py"
    mode: 0644
  tags:
    - test

- name: Run ReFrame tests
  ansible.builtin.command:
    cmd: "{{ reframe_venv_dir + '/bin/' if reframe_exists.rc != 0 else '' }}reframe -r -v -c {{ reframe_venv_dir }}/compat_layer.py"
  environment:
    EESSI_VERSION: "{{ eessi_version }}"
    EESSI_OS: "{{ eessi_host_os }}"
    EESSI_ARCH: "{{ eessi_host_arch }}"
  register: reframe_cmd
  changed_when: false
  failed_when: reframe_cmd.rc != 0
  tags:
    - test
